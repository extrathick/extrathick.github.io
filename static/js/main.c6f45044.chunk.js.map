{"version":3,"sources":["pics/shroom.png","pics/mushroom-gill-spacing.jpg","pics/mushroom-ring-type.jpg","pics/mushroomForest.jpg","pics/grabShroom.jpg","lib/csvValueLookup.js","lib/colors.js","components/GenericEchartsSunburst.js","components/GenericBarChart.js","components/GenericClusteredBarChart.js","components/ChartSummary.js","components/SunburstController.js","components/calculator/CalcSubclass.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","json","require","mushroom","lookup","char","category","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","jsonArray","Symbol","iterator","next","done","item","value","key","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","character","err","return","res","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","push","i","length","count","types","this","getAllPossible","slot","getCategoryNumber","forEach","data","type","index","subcategories","getCount","category2","counts","types2","slot2","subcategory","header","title","replace","toLowerCase","split","charAt","toUpperCase","substring","join","getTitle","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","jsonCategory","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","array","arrayPlusIndex","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","retObj","edibleCount","poisonCount","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","row","passed","_i","result","categoryNumber","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","customColors","look","GenericEchartsSunburst","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","option","getOption","_this$props","inner","outer","computed","compute","color","colorTool","colorsOuter","getColors","colorsInner","entries","_ref3","_ref2","slicedToArray","valueInner","obj","name","children","itemStyle","_ref6","_ref5","valueOuter","outerObj","number","series","radius","label","rotate","innerCategory","outerCategory","computeHelper","map","innerNumber","outerNumber","datum","itemIn","itemOut","prevProps","setState","react_default","a","createElement","lib_default","style","height","width","React","Component","GenericBarChart","custom","compileData","colors","getData","text","textStyle","x","y","xAxis","axisLabel","yAxis","tooltip","trigger","axisPointer","toolbox","show","orient","left","top","feature","mark","dataView","readOnly","magicType","restore","saveAsImage","GenericClusteredBarChart","getCountComparingTwoCategories","names","alldata","fontSize","legend","len","barGap","backgroundColor","padding","ChartSummary","summary","getSummary","set1","set2","className","react_textfit_lib","mode","min","SunburstController","setHeader","getCategories","element","setInner","setOuter","headers","_this2","Grid","GridRow","GridColumn","Dropdown","placeholder","fluid","search","selection","options","onChange","event","components_GenericBarChart","components_GenericEchartsSunburst","components_GenericClusteredBarChart","components_ChartSummary","List","styled","div","_templateObject","CalcSubclass","arg","clicked","ret","target","chosen","shortList","list","items","CalcSubclass_Header","CalcSubclass_ItemButton","click","disabled","ItemButton","_this3","clicc","class","onClick","toggle","active","Title","_templateObject2","Header","_Component3","apply","arguments","inherits","createClass","Calculator","returnMethod","keyVal","remove","calcVal","splice","calculateEdibility","showAll","visibleItems","smallList","totalList","getUsedItems","usedValues","isUsed","values","getValueCount","newEdibility","shortCalcVal","getShortValue","getPoisonChance","edibility","createCategoryButtons","boolean","slice","filteredList","filter","word","includes","Button","basic","inverted","toggleSubcategories","listItem","toConsumableArray","concat","toggleColumn","column","render","listItems","categoryNum","vis","CalcSubclass_CalcSubclass","Calculator_Header","toPrecision","h1","Calculator_templateObject","App","src","logo","alt","marginBottom","marginRight","marginLeft","textAlign","forest","grab","marginTop","ring","spacing","Calculator_Calculator","SunburstController_SunburstController","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6f45044.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shroom.545b9bae.png\";","module.exports = __webpack_public_path__ + \"static/media/mushroom-gill-spacing.caacd31a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mushroom-ring-type.1f65343b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mushroomForest.ceb60242.jpg\";","module.exports = __webpack_public_path__ + \"static/media/grabShroom.cf3d626c.jpg\";","const json = require('../data/kaggle.json');\r\nconst mushroom = require('../data/mushrooms.json');\r\n\r\nclass lookup{\r\n    /* This function takes a character and the category and will return the \"expanded version\" of the character\r\n    example: lookupChar('a', 'population') will return \"abundant\"\r\n    it is worth noting that edibility is 'classes'\r\n    */ \r\n    lookupChar(char, category){\r\n        for (let item of json.jsonArray){\r\n            if(item.key === category){\r\n                for(let character of item.value){\r\n                    if(character.key === char){\r\n                        return character.value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    Returns all possible values for a category.\r\n    Example: 'classes' returns key/value pairs for edible e and poisonous p\r\n    */\r\n    getAllPossible(category){\r\n        let res = [];\r\n        for (let item of json.jsonArray){\r\n            if(item.key === category){\r\n                for(let character of item.value){\r\n                    res.push(character);\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    // this takes a number and returns at which place in the array it should be at.\r\n    getCategoryNumber(category){\r\n        for(let i = 0; i < json.jsonArray.length; i++){\r\n            if(json.jsonArray[i].key === category){\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    //takes a category and returns the number of times a subcategory appears in the mushroom dataset as an array\r\n    getCount(category) {\r\n        let count = [];\r\n        let types = this.getAllPossible(category);\r\n        let slot = this.getCategoryNumber(category);\r\n\r\n        types.forEach(() => {\r\n            count.push(0);\r\n        });\r\n\r\n        mushroom.data.forEach((mushroom) => {\r\n            types.forEach((type, index) => {\r\n                if (mushroom[slot] === type.key) {\r\n                    count[index]++;\r\n                }\r\n            });\r\n        });\r\n\r\n        return count;\r\n    }\r\n\r\n    //takes a category and returns the subcategory and its count in the mushroom dataset as an array. \r\n    //array[0] = headers array[1] = count\r\n    getData(category){\r\n        let data = [];\r\n        let subcategories = [];\r\n        let count = this.getCount(category);\r\n        let types = this.getAllPossible(category);\r\n       \r\n        types.forEach((type) => {\r\n            subcategories.push(type.value);\r\n        });\r\n\r\n        data.push(subcategories);\r\n        data.push(count);\r\n\r\n        return data;\r\n    }\r\n\r\n    //returns number of times each element in category2 appears for each element in category\r\n    //array[0] = headers rest = count\r\n    getCountComparingTwoCategories(category, category2){\r\n        let count = [];\r\n        let counts = []; \r\n        let subcategories = [];\r\n        let types = this.getAllPossible(category);\r\n        let types2 = this.getAllPossible(category2);\r\n        let slot = this.getCategoryNumber(category);\r\n        let slot2 = this.getCategoryNumber(category2);;\r\n\r\n        types.forEach(() => {\r\n            count.push(0);\r\n        });\r\n        \r\n        types.forEach((type) => {\r\n            subcategories.push(type.value);\r\n        });\r\n\r\n        counts.push(subcategories);\r\n\r\n        types2.forEach((subcategory) => {\r\n            mushroom.data.forEach((mushroom) => {\r\n                if (mushroom[slot2] === subcategory.key) {\r\n                    types.forEach((type, index) => {\r\n                        if (mushroom[slot] === type.key) {\r\n                            count[index]++;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            counts.push(count);\r\n            count = [];\r\n            types.forEach(() => {\r\n                count.push(0);\r\n            });    \r\n        });\r\n\r\n        return counts;    \r\n    }\r\n\r\n    // Returns all categories\r\n    getCategories(){\r\n        return mushroom.header;\r\n    }\r\n\r\n    // Returns generic title\r\n    getTitle(category){\r\n\r\n        let title = '';\r\n\r\n        if (category === 'class'){\r\n            category = 'edibility';\r\n        }\r\n\r\n        title = category.replace(/-/g, ' ').toLowerCase().split(' ');\r\n\r\n        for (var i = 0; i < title.length; i++) {\r\n            title[i] = title[i].charAt(0).toUpperCase() + title[i].substring(1);     \r\n        }\r\n\r\n        return title.join(' '); \r\n    }\r\n\r\n    getClusteredTitle(category, category2){\r\n        let title = this.getTitle(category) + ' vs ' + this.getTitle(category2);\r\n\r\n        return title;\r\n    }\r\n\r\n\r\n    // when given a category and the \"long version\" of the field (i.e. getShortValue('class', 'edible'), it will return e)\r\n    getShortValue(category, value){\r\n        for(let jsonCategory of json.jsonArray){\r\n            if(jsonCategory.key === category){\r\n                for(let item of jsonCategory.value){\r\n                    if(item.value === value){\r\n                        return item.key;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // this takes an array of key value pairs of category and value and returns the chance out of 1 that you'll get poisoned\r\n    // the key is the category and the value is short name of the field\r\n    // the array does not need to be sorted\r\n    // returns -1 if no data\r\n    getPoisonChance(array){\r\n        // we build up a sorted array to save ourselves trouble\r\n        let arrayPlusIndex = [];\r\n        for(let item of array){\r\n            let retObj = {\r\n                key: item.key,\r\n                value: item.value,\r\n                index: this.getCategoryNumber(item.key)\r\n            }\r\n            arrayPlusIndex.push(retObj);\r\n        }\r\n        let edibleCount = 0;\r\n        let poisonCount = 0;\r\n        for(let row of mushroom.data){\r\n            // this tracks if we pass all tests\r\n            let passed = true;\r\n            for(let item of arrayPlusIndex){\r\n                if(row[item.index] !== item.value){\r\n                    passed = false;\r\n                }\r\n            }\r\n            if(passed){\r\n                if(row[0] === 'p'){\r\n                    poisonCount++;\r\n                }\r\n                else{\r\n                    edibleCount++;\r\n                }\r\n            }\r\n        }\r\n        // the case in which we have no data\r\n        if(edibleCount === 0 & poisonCount === 0){\r\n            return -1;\r\n        }\r\n        // the normal case\r\n        else{\r\n            return (edibleCount/(edibleCount + poisonCount));\r\n        }\r\n    }\r\n\r\n    /*\r\n    Takes a category and a short value and returns the count of the item in an array of [edible count, poison count]\r\n    */\r\n    getValueCount(category, value){\r\n        // ++ gets angry at you if you don't initialize value :v\r\n        let result = [0, 0];\r\n        let categoryNumber = this.getCategoryNumber(category);\r\n        for(let row of mushroom.data){\r\n            if(row[categoryNumber] === value){\r\n                if(row[0] === 'e'){\r\n                    result[0]++;\r\n                }\r\n                else{\r\n                    result[1]++;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default lookup;","import lookup from '../lib/csvValueLookup';\r\n\r\nclass customColors {\r\n\r\n    getColors(category, category2){\r\n\r\n        this.look = new lookup()\r\n        let colors = []\r\n\r\n        if (category2 !== undefined) {\r\n            if (this.look.getAllPossible(category).length < this.look.getAllPossible(category2).length) {\r\n                category = category2;\r\n            }\r\n        }\r\n\r\n        // setting color based on category\r\n        if (category === 'class'){\r\n            colors = ['#A9CBA6','#7955A0']\r\n        }\r\n        else if (category === 'cap-color') {\r\n            colors = ['#C37861','#F2D285','#7C3A00','#7d7d7d','#9ed597','#ffb6c1','#6b3fa0','#da635d','#f8f8ff','#ffff93'];\r\n        }\r\n        else if (category === 'gill-color') {\r\n            colors = ['#201e1e','#C37861','#F2D285','#7e4d32','#7d7d7d','#9ed597','#FFB347','#ffb6c1','#6b3fa0','#da635d','#f8f8ff','#ffff93'];\r\n        }\r\n        else if (category === 'stalk-color-above-ring' || category === 'stalk-color-below-ring') {\r\n            colors = ['#C37861','#F2D285','#7C3A00','#7d7d7d','#FFB347','#ffb6c1','#da635d','#f8f8ff','#ffff93'];\r\n        }\r\n        else if (category === 'veil-color') {\r\n            colors = ['#C37861','#FFB347','#f8f8ff','#ffff93'];\r\n        }\r\n        else if (category === 'spore-print-color') {\r\n            colors = ['#201e1e','#C37861','#F2D285','#7e4d32','#9ed597','#FFB347','#6b3fa0','#f8f8ff','#ffff93'];\r\n        }\r\n        else if (this.look.getAllPossible(category).length < 4) {\r\n            colors = ['#5B5F97', '#FFC145', '#FFFFFB'];\r\n        }\r\n        else {\r\n            colors = ['#f1ca9c', '#2da0a1', '#214d4e', '#71dd82', '#458612', '#c7dd91', '#82400f', '#f68aad', '#f82387', '#d60724', '#f2cdb9', '#b08965'];\r\n        }\r\n\r\n        return colors\r\n    }\r\n}\r\n\r\nexport default customColors;","import React from 'react';\r\nimport lookup from '../lib/csvValueLookup';\r\nimport ReactEcharts from 'echarts-for-react';\r\nimport json from '../data/mushrooms.json';\r\nimport colorTool from '../lib/colors';\r\n\r\n// This makes a Sunburst chart. It requires the inner and outer prop to be set to valid categories from the mushroom data\r\nclass GenericEchartsSunburst extends React.Component{\r\n    // initial setup and data crunching\r\n    constructor(props){\r\n        super(props);\r\n        this.look = new lookup();\r\n        this.state = {\r\n            option: null\r\n        }\r\n        this.state.option = this.getOption();\r\n    }\r\n\r\n    getOption(){\r\n        const { inner, outer } = this.props;\r\n        this.computed = this.compute(inner, outer);\r\n        let data = [];\r\n        // build up the data\r\n        let color = new colorTool();\r\n        const colorsOuter = color.getColors(outer, outer);\r\n        const colorsInner = color.getColors(inner, inner);\r\n        for(let [index, valueInner] of this.computed.entries()){\r\n            let obj = {};\r\n            obj.name = valueInner.value;\r\n            obj.children = [];\r\n            obj.itemStyle = {\r\n                color: colorsInner[index]\r\n            }\r\n\r\n            for(let [index, valueOuter] of valueInner.outer.entries()){\r\n                let outerObj = {};\r\n                outerObj.name = valueOuter.value;\r\n                outerObj.value = valueOuter.number;\r\n                outerObj.itemStyle = {\r\n                    color: colorsOuter[index]\r\n                }\r\n                obj.children.push(outerObj);\r\n            }\r\n            data.push(obj);\r\n        }\r\n        // set the option\r\n        let option = {\r\n            series: {\r\n                type: 'sunburst',\r\n                // highlightPolicy: 'ancestor',\r\n                data: data,\r\n                radius: [0, '90%'],\r\n                label: {\r\n                    rotate: 'radial'\r\n                }\r\n            }\r\n        };\r\n        return option;\r\n    }\r\n\r\n    // This does the math of the sunburst. I belive this to be correct\r\n    compute(innerCategory, outerCategory){\r\n        // Small function to make the objects to have a number value that is initially 0\r\n        function computeHelper(obj){\r\n            let retObj = {}\r\n            retObj.key = obj.key;\r\n            retObj.value = obj.value;\r\n            retObj.number = 0;\r\n            return retObj;\r\n        }\r\n        // come up with the inner categoryies, but add a number and set to 0\r\n        const inner = this.look.getAllPossible(innerCategory).map(computeHelper);\r\n        // for each item in the inner category, add the outer category with number = 0\r\n        for(let number in inner){\r\n            inner[number].outer = this.look.getAllPossible(outerCategory).map(computeHelper);\r\n        }\r\n        const innerNumber = this.look.getCategoryNumber(innerCategory);\r\n        const outerNumber = this.look.getCategoryNumber(outerCategory);\r\n        // I think this will take a horrendous amount of time. I can't think of anything else tho?\r\n        // feel free to refactor this\r\n        for(let datum of json.data){\r\n            for(let itemIn in inner){\r\n                if(datum[innerNumber] === inner[itemIn].key){\r\n                    inner[itemIn].number++;\r\n                    for(let itemOut of inner[itemIn].outer){\r\n                        if(datum[outerNumber] === itemOut.key){\r\n                            itemOut.number++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return inner;\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(this.props !== prevProps){\r\n            this.setState({\r\n                option: this.getOption()\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        // We may need to change the style, or just pass in style as a prop\r\n        return (\r\n            <ReactEcharts \r\n                option={this.state.option}\r\n                style={{height: '100%', width: '100%'}}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default GenericEchartsSunburst;","import React from 'react';\r\nimport lookup from '../lib/csvValueLookup';\r\nimport customColors from '../lib/colors';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nclass GenericBarChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.look = new lookup();\r\n        this.custom = new customColors();\r\n        this.state = {\r\n            //option: title, data, category\r\n            option: this.getOption(this.getTitle(), this.compileData(this.props.category, this.getColors()), this.props.category)\r\n        }\r\n    }\r\n\r\n    getTitle() {\r\n        return (this.props.title === 'default') ? this.look.getTitle(this.props.category) : this.props.title;\r\n    }\r\n\r\n    getColors() {\r\n        return (this.props.colors === 'default') ? this.custom.getColors(this.props.category) : this.props.colors;\r\n    }\r\n\r\n    // Associates the data from the category to the colors given\r\n    compileData(category, colors) {\r\n        let data = this.look.getData(category);\r\n        let series = [];\r\n        data[1].forEach((count, index) => {\r\n            if (colors.length > 0 && colors.length >= data[1].length) {\r\n                series.push({\r\n                    value: count,\r\n                    itemStyle: { color: colors[index] }\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n        return series;\r\n    }\r\n\r\n    //The main state that determines the settings for the bar chart\r\n    getOption(title, data, category) {\r\n        let header = this.look.getData(category);\r\n        let option = {\r\n            title: {\r\n                text: 'placeholder',\r\n                textStyle: { color: 'white' },\r\n                x: 'center',\r\n                y: 'top'\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                data: [],\r\n                axisLabel: {\r\n                    textStyle: { color: 'white' }\r\n                }\r\n            },\r\n            yAxis: {\r\n                type: 'value',\r\n                axisLabel: {\r\n                    textStyle: { color: 'white' }\r\n                }\r\n            },\r\n            series: [],\r\n            tooltip: {\r\n                trigger: 'axis',\r\n                axisPointer: {\r\n                    type: 'shadow'\r\n                }\r\n            },\r\n            toolbox: {\r\n                show: true,\r\n                orient: 'vertical',\r\n                left: 'right',\r\n                top: 'center',\r\n                feature: {\r\n                    mark: { show: true },\r\n                    dataView: { show: true, readOnly: false },\r\n                    magicType: { show: true, type: ['line', 'bar'] },\r\n                    restore: { show: true },\r\n                    saveAsImage: { show: true }\r\n                }\r\n            }\r\n        };\r\n\r\n        option.title.text = title;\r\n        header[0].forEach((name, index) => {\r\n            option.xAxis.data.push(name);\r\n        });\r\n        option.series.push({ data, type: 'bar' });\r\n\r\n        return option;\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.category !== prevProps.category) {\r\n            this.setState({\r\n                option: this.getOption(this.getTitle(), this.compileData(this.props.category, this.getColors()), this.props.category)\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ReactEcharts\r\n                option={this.state.option}\r\n                style={{ height: '100%', width: '100%' }}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default GenericBarChart;","import React from 'react';\r\nimport lookup from '../lib/csvValueLookup';\r\nimport customColors from '../lib/colors';\r\nimport ReactEcharts from 'echarts-for-react';\r\nimport '../componentStyling/SunburstController.css'\r\n\r\nclass GenericClusteredBarChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.look = new lookup();\r\n        this.custom = new customColors();        \r\n        this.state = {\r\n            option: this.getOption(this.getTitle(), this.look.getCountComparingTwoCategories(this.props.category, this.props.category2), this.props.category, this.props.category2, this.getColors())\r\n        }\r\n    }\r\n\r\n    getTitle() {\r\n        return (this.props.title === 'default') ? 'Number of ' + this.look.getTitle(this.props.category) + ' for each ' + this.look.getTitle(this.props.category2) : this.props.title;\r\n    }\r\n\r\n    getColors() {\r\n        return (this.props.colors === 'default') ? this.custom.getColors(this.props.category, this.props.category2) : this.props.colors;\r\n    }\r\n\r\n    getOption(title, data, category, category2, colors) {\r\n\r\n        let header = this.look.getData(category);\r\n        let names = this.look.getData(category2);\r\n        let alldata = data;\r\n\r\n        let option = {\r\n            color: colors,\r\n            title: {\r\n                text: 'placeholder',\r\n                textStyle: { color: \"white\",\r\n                            fontSize: 25 },\r\n                x: 'center',\r\n                y: 'top'\r\n            },\r\n            legend: {\r\n                data:[],\r\n                textStyle: {color: \"white\",\r\n                            fontSize: 25},\r\n                x: 'center',\r\n                y: 'bottom'\r\n              },            \r\n            xAxis: {\r\n                type: 'category',\r\n                data: [],\r\n                axisLabel: {\r\n                    textStyle: { color: \"white\",\r\n                    fontSize: 25 }\r\n                }\r\n            },\r\n            yAxis: {\r\n                type: 'value',\r\n                axisLabel: {\r\n                    textStyle: { color: 'white',\r\n                    fontSize: 25 },\r\n                }\r\n            },\r\n            series: [],\r\n            tooltip: {\r\n                trigger: 'axis',\r\n                axisPointer: {\r\n                    type: 'shadow'\r\n                }\r\n            },\r\n            toolbox: {\r\n                show: true,\r\n                orient: 'vertical',\r\n                left: 'right',\r\n                top: 'center',\r\n                feature: {\r\n                    mark: { show: true },\r\n                    dataView: { show: true, readOnly: false },\r\n                    magicType: { show: true, type: ['line', 'bar'] },\r\n                    restore: { show: true },\r\n                    saveAsImage: { show: true }\r\n                }\r\n            }\r\n        };\r\n\r\n        for (var i = 1, len = alldata.length; i < len; i++){\r\n            data = alldata[i];\r\n            option.series.push({ data, type: 'bar', barGap: 0, name: 'placeholder name'});\r\n        }\r\n\r\n        option.title.text = title;\r\n\r\n        header[0].forEach((name) => {\r\n            option.xAxis.data.push(name);\r\n        });\r\n        names[0].forEach((name, index) => {\r\n            option.legend.data.push(name);\r\n            option.series[index].name = name;\r\n        });\r\n\r\n        return option;\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props !== prevProps) {\r\n            // eslint-disable-next-line\r\n            this.state.option = null;\r\n            this.setState({\r\n                option: this.getOption(this.getTitle(), this.look.getCountComparingTwoCategories(this.props.category, this.props.category2), this.props.category, this.props.category2, this.getColors())\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.option.legend.data.length === this.look.getAllPossible(this.props.category2).length){\r\n            return (\r\n                    <ReactEcharts\r\n                        option={this.state.option}\r\n                        style={{ height: '100%', width: '100%', backgroundColor: \"rgba(90, 90, 90, 0.2)\", padding: '2%' }}                        \r\n                    />\r\n            )\r\n        }\r\n        else{\r\n            return (null);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default GenericClusteredBarChart;","import React from 'react';\r\nimport lookup from '../lib/csvValueLookup';\r\nimport { Textfit } from 'react-textfit';\r\nimport '../componentStyling/ChartSummary.css'\r\n\r\nclass ChartSummary extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.category = this.props.category;\r\n        this.category2 = this.props.category2;\r\n        this.text = this.props.text;\r\n        \r\n        this.state = {\r\n            summary: ''\r\n        }\r\n\r\n        this.look = new lookup();\r\n        \r\n        this.state.summary = this.getSummary(this.category, this.category2, this.text);\r\n    }\r\n\r\n    getSummary(category, category2, text) {\r\n        let summary = '';\r\n        let set1 = this.look.getTitle(category).toLowerCase();\r\n        let set2 = this.look.getTitle(category2).toLowerCase();\r\n\r\n        // if user set a custom text\r\n        if (text !== 'default') {\r\n            summary = text;\r\n        }\r\n        // generate a summary\r\n        else {\r\n            // prewritten chart summaries\r\n            // odor\r\n            if ((category === 'odor' && category2 === 'class') || (category === 'class' && category2 === 'odor')) {\r\n                summary = 'Odor is a strong indicator of edibility. If a mushroom smells nice (almonds or anise) it is edible. If it smells bad (creosote, fishy, foul, musty, pungent, or spicy) the mushroom is poisonous. The only ambiguous case is when it has no smell. No smell is still likely to be edible about 97% of the time.';\r\n            }\r\n            // gill color\r\n            else if ((category === 'gill-color' && category2 === 'class') || (category === 'class' && category2 === 'gill-color')) {\r\n                summary = 'Buff color gills are the most common and each of those samples are poisonous. Green is less common but it is distinctly poisonous. Gills colored orange and red are always edible.';\r\n            }\r\n            else if ((category === 'ring-type' && category2 === 'class') || (category === 'class' && category2 === 'ring-type')) {\r\n                summary = 'A ring (if present) is formed around the stipe (stalk). 15% of our samples have large rings and they are only poisonous. A small set of mushrooms are flared rings and they are all edible.';\r\n            }            \r\n            else if ((category === 'gill-spacing' && category2 === 'class') || (category === 'class' && category2 === 'gill-spacing')) {\r\n                summary = 'Gill spacing can be used to indicate that a mushroom is most likely edible if the gills are crowded. Mushrooms with crowded gills are 91% likely to be edible.';\r\n            }      \r\n            else {\r\n                // GenericBarChart\r\n                if (category2 === 'none') {\r\n                    summary = 'This chart represents ' + set1 + ' within the mushroom dataset.';\r\n                }\r\n                //GenericClusteredBarChart\r\n                else {  \r\n                    summary = 'This chart represents the ' + set2 + ' within the '+ set1 + ' set in the mushroom dataset.';\r\n                }\r\n            }\r\n        }\r\n        return summary;\r\n    }\r\n    \r\n    componentDidUpdate(prevProps) {\r\n        if ((this.props.category !== prevProps.category) || (this.props.category2 !== prevProps.category2)) {\r\n            this.setState({\r\n                summary: this.getSummary(this.props.category, this.props.category2, this.props.text)\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // https://github.com/malte-wessel/react-textfit\r\n            <div className='background2'>\r\n                <Textfit mode=\"multi\" \r\n                min={25}>\r\n                    {this.state.summary}\r\n                </Textfit>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartSummary;","import React, { Component } from 'react';\r\nimport '../componentStyling/SunburstController.css'\r\nimport GenericEchartsSunburst from '../components/GenericEchartsSunburst';\r\nimport GenericBarChart from '../components/GenericBarChart';\r\nimport GenericClusteredBarChart from '../components/GenericClusteredBarChart';\r\nimport lookup from '../lib/csvValueLookup';\r\nimport { Dropdown, Grid, GridColumn, GridRow } from 'semantic-ui-react';\r\nimport ChartSummary from '../components/ChartSummary';\r\n\r\nexport default class SunburstController extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.look = new lookup();\r\n        this.headers = this.setHeader();\r\n        this.state = {\r\n            inner: 'class',\r\n            outer: 'class'\r\n        }\r\n    }\r\n\r\n    setHeader = () => {\r\n        let header = [];\r\n        let category = this.look.getCategories();\r\n        category.forEach(element => {\r\n            header.push({\r\n                text: element,\r\n                value: element\r\n            });\r\n        });\r\n\r\n        return header;\r\n    }\r\n\r\n    setInner = (inner) => {\r\n        this.setState((state, props) => {\r\n            return {\r\n                inner: inner,\r\n\r\n            };\r\n        });\r\n    }\r\n\r\n    setOuter = (outer) => {\r\n        this.setState((state, props) => {\r\n            return {\r\n\r\n                outer: outer\r\n            };\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"background\">\r\n            \t<Grid>\r\n            \t    <GridRow style={{height: '5vh'}}>\r\n            \t        <GridColumn width={8}>\r\n            \t            <Dropdown placeholder='Select First Value' fluid search selection options={this.headers} onChange={(event, data) => this.setInner(data.value)} className=\"dropdown\"/>\r\n            \t        </GridColumn>\r\n            \t        <GridColumn width={8}>\r\n            \t            <Dropdown placeholder='Select Second Value' fluid search selection options={this.headers} onChange={(event, data) => this.setOuter(data.value)} className=\"dropdown\"/>\r\n            \t        </GridColumn>\r\n            \t    </GridRow>\r\n            \t    <GridRow style={{height: '40vh'}}>\r\n            \t        <GridColumn width={5}>\r\n            \t            <GenericBarChart title='default' category={this.state.inner} colors='default' />\r\n            \t        </GridColumn>\r\n            \t        <GridColumn width={5}>\r\n            \t            <GenericEchartsSunburst inner={this.state.inner} outer={this.state.outer} />\r\n            \t        </GridColumn>\r\n            \t        <GridColumn width={5}>\r\n            \t            <GenericBarChart title='default' category={this.state.outer} colors='default' />\r\n            \t        </GridColumn>\r\n            \t    </GridRow>\r\n            \t    <GridRow style={{height: '40vh'}}>\r\n            \t        <GenericClusteredBarChart title='default' category={this.state.inner} category2={this.state.outer} colors='default' />\r\n            \t    </GridRow>\r\n            \t    <GridRow style={{height: '3vh'}}>\r\n            \t        <GridColumn>\r\n                            <ChartSummary category={this.state.outer} category2={this.state.inner} text='default' />                \t            \r\n            \t        </GridColumn>\r\n            \t    </GridRow>\r\n            \t</Grid>\r\n            </div>\r\n                \r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport lookup from '../../lib/csvValueLookup';\r\nimport styled from 'styled-components';\r\nimport { Button } from 'semantic-ui-react'\r\n\r\n// The list of all the buttons\r\nconst List = styled.div `\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nexport default class CalcSubclass extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.look = new lookup();\r\n        let list = props.list;\r\n        // just get the 'long' versions from the list of possible values\r\n        let shortList = list.map(item => {\r\n            return item.value;\r\n        });\r\n        this.state = {\r\n            items: shortList,\r\n            chosen: false\r\n        }\r\n    }\r\n    // this is what happens when you click on an item. We set the value in calculator and also change the style. This also helps disable the buttons\r\n    call = (arg, clicked) => {\r\n        if(!clicked){\r\n            this.setState({\r\n                chosen: true\r\n            });\r\n            this.props.ret({\r\n                key: this.props.category,\r\n                value: arg.target.value\r\n            }, clicked);\r\n        }\r\n        else {\r\n            this.props.ret({\r\n                key: this.props.category,\r\n                value: arg.target.value\r\n            }, clicked);\r\n            this.setState({\r\n                chosen: false\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n            <Header category={this.props.category}/>\r\n            {/* This renders out the title, which is defined above */}\r\n                <List>\r\n                    {/* This is the bulk of our work, in rendering the ItemButton, which handles a lot of the log. Disabled is to make it disabled later. click is our return method */}\r\n                    {this.state.items.map((item) => {\r\n                        return <ItemButton key={item} value={item} click={this.call} disabled={this.state.chosen}>{item}</ItemButton>\r\n                    })}\r\n                </List>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// i need this for state\r\nclass ItemButton extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         clicked: false,\r\n      };\r\n    }\r\n    \r\n    // this is how we track if the button was previously clicked, so that we can go ahead and keep it enabled while disabling other buttons\r\n    clicc = (event) =>{\r\n        this.props.click(event, this.state.clicked);\r\n        this.setState({clicked: !this.state.clicked});\r\n    }\r\n\r\n  render() {\r\n      // disabled here is either false or the passed value of disabled. This allows us to selectively disable all but one element.\r\n      // this.props.children is the elements inside the button. Since we're using a styled component, we need to do this. \r\n    return (\r\n        <button class='ui white inverted button' onClick={this.clicc} value={this.props.value} toggle active={this.state.clicked} disabled={this.state.clicked ? false : this.props.disabled}>{this.props.children}</button>\r\n    )\r\n  }\r\n}\r\n\r\n// The title for each section of the calculator\r\nconst Title = styled.p `\r\n    color: white;\r\n    margin-bottom: .5vh;\r\n`;\r\n\r\nexport class Header extends Component {\r\n    render(){\r\n        return (\r\n            <Title>{this.props.category}</Title>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport lookup from '../lib/csvValueLookup';\r\nimport CalcSubclass from './calculator/CalcSubclass';\r\nimport styled from 'styled-components';\r\nimport {Grid, GridColumn, GridRow, Button} from 'semantic-ui-react';\r\nimport '../componentStyling/Calculator.css'\r\n\r\nexport default class Calculator extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.look = new lookup();\r\n        this.list = this.look.getCategories();\r\n        // calcval keeps track of all the values selected in the calculator\r\n        // this should potentially be state, but this keeps redraws down.\r\n        this.calcVal = [];\r\n        let visibleItems = this.getUsedItems();\r\n        this.totalList = visibleItems.map(value => value.category);\r\n        this.smallList = [\"odor\", \"gill-color\", \"ring-type\", \"gill-spacing\"];\r\n        this.state = {\r\n            clicked: false,\r\n            column: false,\r\n            edibility: .5,\r\n            visibleItems: [],//list,\r\n            vis: visibleItems//[\"odor\", \"gill-color\", \"ring-type\", \"gill-spacing\"]\r\n        }\r\n    }\r\n\r\n    // remove here is a bit of a hack. if it's true i remove the item, if it's false i add it. \r\n    returnMethod = (keyVal, remove) => {\r\n        if(remove){\r\n            for(let i in this.calcVal){\r\n                // it turns out there's no good way to do this in javascript. options are to either look at a 3rd party library, do this, or do JSON.stringify on both. \r\n                if(this.calcVal[i].value === keyVal.value && this.calcVal[i].key === keyVal.key){\r\n                    this.calcVal.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.calcVal.push(keyVal);\r\n        }\r\n        this.calculateEdibility();\r\n    }\r\n\r\n    showAll = () => {\r\n        if(this.state.visibleItems.length > 15){\r\n            this.setState({\r\n                visibleItems: this.smallList\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                visibleItems: this.totalList\r\n            });\r\n        }\r\n    }\r\n\r\n    getUsedItems = () => {\r\n        let items = this.look.getCategories();\r\n        let ret = [];\r\n        for(let item of items){\r\n            let list = this.look.getAllPossible(item);\r\n            let usedValues = [];\r\n            for(let value of list){\r\n                if(this.isUsed(item, value.key)){\r\n                    usedValues.push(value);\r\n                }\r\n            }\r\n            if(usedValues.length !== 1){\r\n                ret.push({\r\n                    category: item,\r\n                    values: usedValues\r\n                });\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    isUsed = (category, item) => {\r\n        let count = this.look.getValueCount(category, item);\r\n        if(count[0] + count[1] === 0){\r\n            return false;\r\n        }\r\n        else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // this function calcultes the edibility of a selection of attributes\r\n    calculateEdibility = () => {\r\n        let newEdibility = .5;\r\n        if(this.calcVal.length !== 0){\r\n            let shortCalcVal = [];\r\n            // this normalizes our data so we don't have to write another weird computation method\r\n            for(let item of this.calcVal){\r\n                if(item !== 'class'){\r\n                    shortCalcVal.push({\r\n                        key: item.key,\r\n                        value: this.look.getShortValue(item.key, item.value)\r\n                    });\r\n                }\r\n            }\r\n            newEdibility = this.look.getPoisonChance(shortCalcVal);\r\n        }\r\n        this.setState({edibility: newEdibility})\r\n    }\r\n\r\n    //Creates the options for the calculator - toggles subcategories\r\n    createCategoryButtons = (boolean) => {\r\n        let smallList = this.smallList.slice();\r\n        let bigList = this.totalList.slice();\r\n        let filteredList = bigList.filter(word => !smallList.includes(word));\r\n        let list;\r\n        // this is necessary don't change\r\n        if (!(boolean !== !!!false) && !false) {\r\n            list = smallList;\r\n        } else {\r\n            // {this.createCategoryButtons(false).map(item => <p>{item}</p>)}  \r\n            list = filteredList;\r\n        }\r\n        return(\r\n            list.map(item => <Button fluid basic inverted className=\"category\" onClick={() => this.toggleSubcategories(item)} key={item}>{item}</Button>)\r\n        );\r\n    }\r\n\r\n    toggleSubcategories = (item) => {\r\n        if(this.state.visibleItems.includes(item)){\r\n            let list = [];\r\n            for(let listItem in this.state.visibleItems){\r\n                \r\n                if(this.state.visibleItems[listItem] !== item){\r\n                    list.push(this.state.visibleItems[listItem]);\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                visibleItems: list\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                visibleItems: [...this.state.visibleItems, item]\r\n            });\r\n        }\r\n    }\r\n\r\n    //Toggle for the amount of buttons shown\r\n    toggleColumn = () => {\r\n        this.setState({\r\n            column: !this.state.column\r\n        });\r\n    }\r\n\r\n    // this renders out the dom, mostly just calcsubclasses\r\n    render = () => {\r\n        // generate all the buttons\r\n        let listItems = this.state.visibleItems.map((listItem, index) => {\r\n            // remove the edibilty button because it doesn't make sense\r\n            if(listItem === \"class\"){\r\n                return null;\r\n            }\r\n            else{\r\n                let categoryNum = 0;\r\n                for(let item in this.state.vis){\r\n                    if(this.state.vis[item].category === listItem){\r\n                        categoryNum = item;\r\n                    }\r\n                }\r\n                return (\r\n                    <CalcSubclass key={listItem} category={listItem} ret={this.returnMethod} list={this.state.vis[categoryNum].values} />\r\n                );\r\n            }\r\n        });\r\n\r\n        \r\n        return (\r\n            <div className=\"background\">\r\n                <Grid >\r\n                    <GridRow>\r\n                    {this.state.column === true ?\r\n                        <GridColumn width={2} className=\"hidden-categories\">\r\n                            {this.createCategoryButtons(false)}\r\n                        </GridColumn> : null}\r\n                        <GridColumn width={2} className=\"default-categories\">\r\n                            <button class='ui yellow fluid basic button' onClick={this.toggleColumn}>{this.state.column === true ? `Show Less` : `Show More`}</button>\r\n                            {this.createCategoryButtons(true)}\r\n                        </GridColumn>\r\n\r\n                        <GridColumn width={12}>\r\n                            <GridRow className=\"result\">\r\n                                <Header>{(this.state.edibility >= 0) ?\r\n                                    `Chance of Edibility: ${(this.state.edibility * 100).toPrecision(4)}%` :\r\n                                    `No such examples in dataset`\r\n                                }</Header>\r\n                            </GridRow>\r\n                            <GridRow className=\"subcategories\">\r\n                                {listItems}\r\n                            </GridRow>\r\n                        </GridColumn>\r\n                    </GridRow>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst Header = styled.h1`\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\r\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\r\n    sans-serif;\r\n    line\r\n`","\r\n/* THIS IS THE ROOT OF THE APP */\r\n\r\nimport React, { Component } from 'react';\r\nimport logo from './pics/shroom.png'; //Import components/Images from folders like this\r\nimport spacing from './pics/mushroom-gill-spacing.jpg';\r\nimport ring from './pics/mushroom-ring-type.jpg';\r\nimport './App.css';\r\nimport SunburstController from './components/SunburstController';\r\nimport ChartSummary from './components/ChartSummary';\r\n//import GenericBarChart from './components/GenericBarChart';\r\nimport Calculator from './components/Calculator';\r\nimport GenericClusteredBarChart from './components/GenericClusteredBarChart';\r\nimport { Textfit } from 'react-textfit';\r\nimport forest from './pics/mushroomForest.jpg';\r\nimport grab from './pics/grabShroom.jpg';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <div style={{marginBottom: '2vh', marginRight: '3vw', marginLeft: '3vw', textAlign: 'center'}}>\r\n            <Textfit min={50}>\r\n              Introduction\r\n            </Textfit>\r\n          </div>\r\n          <div style={{ marginBottom: '10vh', marginRight: '3vw', marginLeft: '3vw', textAlign: 'center'}}>\r\n            <ChartSummary category='class' category2='class' text='The manual where the data is derived from clearly states that there is no simple rule for determining the edibility of mushrooms. We challenge that statement. By visualizing data we hope to find characteristics commonly shared by poisonous and edible mushrooms. These indicators will hopefully form simple rules to follow when encountering an unknown mushroom.' />\r\n          </div>\r\n          <div style={{marginBottom: '2vh', textAlign: 'center'}}>\r\n        <img src={forest} />\r\n            <Textfit min={50}>\r\n              Scenario\r\n            </Textfit>\r\n          </div>\r\n          <div style={{marginBottom: '15vh', marginRight: '3vw', marginLeft: '3vw', textAlign: 'center'}}>\r\n            <ChartSummary category='class' category2='class' text='Imagine you’re lost in the woods. After several days of no food you encounter two mushrooms. You’ve never seen these mushrooms before. You decide to eat one. What characteristics should you look at to determine if the mushroom is edible?' />\r\n          </div>            \r\n          <img src={grab} />\r\n          <div style={{marginBottom: '2vh', marginTop: '2vh'}}>\r\n            <Textfit min={50}>\r\n              Odor\r\n            </Textfit>\r\n          </div>          \r\n          <div style={{ height: '90vh', width: '90vw', marginBottom: '15vh', textAlign: 'left' }}>\r\n            <GenericClusteredBarChart title='default' category='odor' category2='class' colors='default' />\r\n            <ChartSummary category='odor' category2='class' text='default' />\r\n          </div>\r\n          <div style={{marginBottom: '2vh'}}>\r\n            <Textfit min={50}>\r\n              Gill Color\r\n            </Textfit>\r\n          </div>\r\n          <div style={{ height: '90vh', width: '90vw', marginBottom: '15vh', textAlign: 'left' }}>\r\n            <GenericClusteredBarChart title='default' category='class' category2='gill-color' colors='default' />\r\n            <ChartSummary category='class' category2='gill-color' text='default' />\r\n          </div>\r\n          <div style={{marginBottom: '5vh'}}>\r\n            <Textfit min={50}>\r\n              Ring Type\r\n            </Textfit>\r\n          </div>          \r\n          <img src={ring} alt={\"Different kinds of Mushroom Rings\"}/>\r\n          <div style={{ height: '90vh', width: '90vw', marginBottom: '15vh', textAlign: 'left'}}>\r\n            <GenericClusteredBarChart title='default' category='ring-type' category2='class' colors='default' />\r\n            <ChartSummary category='ring-type' category2='class' text='default' />\r\n          </div>\r\n          <div style={{marginBottom: '5vh'}}>\r\n            <Textfit min={50}>\r\n              Gill Spacing\r\n            </Textfit> \r\n          </div>     \r\n          <img src={spacing} alt={\"Different Mushroom Gill Spacing\"} />        \r\n          <div style={{ height: '45vh', width: '90vw', marginBottom: '15vh', textAlign: 'left' }}>\r\n            <GenericClusteredBarChart title='default' category='gill-spacing' category2='class' colors='default' />\r\n            <ChartSummary category='gill-spacing' category2='class' text='default' />\r\n          </div>\r\n          <div style={{marginBottom: '2vh'}}>\r\n            <Textfit min={50}>\r\n              Strategy\r\n            </Textfit>\r\n          </div>\r\n          <div style={{marginBottom: '15vh', textAlign: 'left'}}>\r\n            <ChartSummary category='class' category2='class' text='- Smell the mushroom' />\r\n            <ChartSummary category='class' category2='class' text='- Observe gill color' />\r\n            <ChartSummary category='class' category2='class' text='- Observe ring type' />\r\n            <ChartSummary category='class' category2='class' text='- If possible choose a mushroom with crowded gill spacing' />\r\n          </div>    \r\n          <div style={{marginBottom: '2vh'}}>\r\n            <Textfit min={50}>\r\n            Conclusion\r\n            </Textfit>\r\n          </div>\r\n          <div style={{marginBottom: '15vh', marginRight: '3vw', marginLeft: '3vw', textAlign: 'center'}}>\r\n            <ChartSummary category='class' category2='class' text='Now armed with your strategy you pick the edible mushroom and avoid the deadly poisonous mushroom. The additional sustenance allows you to keep moving eventually finding your way out of the forest.' />\r\n          </div>  \r\n          <div style={{marginBottom: '2vh'}}>\r\n            <Textfit min={50}>\r\n            Insight\r\n            </Textfit>\r\n          </div>\r\n          <div style={{marginBottom: '15vh', marginRight: '3vw', marginLeft: '3vw', textAlign: 'center'}}>\r\n            <ChartSummary category='class' category2='class' text='Poisonous mushrooms had much more indicators as oppose to edible mushroom. Odor is by far the strongest indicator in the data set. Just by observing odor you can remove half the samples in the mushroom data set.\r\n' />\r\n          </div>\r\n          <div style={{marginBottom: '15vh'}}>\r\n            <Calculator />\r\n          </div>          \r\n          <div style={{marginBottom: '15vh'}}>\r\n            <SunburstController />\r\n          </div>                                 \r\n          {/*<SunburstController />\r\n           <GenericBarChart title='default' category='class' colors='default' />\r\n          <ChartSummary category='class' category2='none' text='default' />\r\n          <GenericBarChart title='default' category='cap-color' colors='default' />\r\n          <ChartSummary category='cap-color' category2='none' text='default' />\r\n          <GenericBarChart title='default' category='gill-color' colors='default' />\r\n          <GenericBarChart title='default' category='stalk-color-above-ring' colors='default' />\r\n          <GenericBarChart title='default' category='stalk-color-below-ring' colors='default' />\r\n          <GenericBarChart title='default' category='veil-color' colors='default' />\r\n          <GenericBarChart title='default' category='spore-print-color' colors='default' />\r\n          <GenericBarChart title='default' category='population' colors='default' />\r\n          <GenericClusteredBarChart title='default' category='odor' category2='class' colors='default' />\r\n          <GenericClusteredBarChart title='default' category='odor' category2='population' colors='default' />\r\n          <ChartSummary category='odor' category2='population' text='default' /> */}\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App; //For each component you make, you'll need to export it.","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}